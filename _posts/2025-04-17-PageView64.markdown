---
layout: post
title:  "PageView64 Dynamic IA32e Paging Structure Explorer"
date:   2025-04-17 07:19:42 +0200
---

For a long time I struggled to visualize `IA32e` paging structures in my head. I always viewed paging as redundant. You'd think paging redundant on modern systems. Indeed, it is possible to implement virtual addressing, protection and session spacing with identity mapping.

The argument for memory efficiency is also not very convincing, but there aren't many reasons for Microsoft to mess with things that already work well enough, not to mention that paging as a concept is more a vertical issue than just software alone.

From the malware perspective, acting on the underlying physical memory is far more powerful than using official `API` to adjust virtual memory. We are able to get around many of the restrictions placed on virtual memory. We can ignore session spacing and page protection. We can construct our own paging structures and allocate memory hidden from the `Virtual Address Descriptor` or `VAD`.

The following diagram describes the layout of an `IA32e` virtual address.

![IA32e Paging Overview](/assets/4_level_paging.png)

Each page table is a list of `512` addresses. The first `256` are reserved for user addresses. There are four page tables. Also consider that `512 * sizeof(uintptr_t) == PAGE_SIZE`. The base physical address of the `PML4` is described by `EPROCESS.DirectoryTableBase`.

Paging relates to session spacing. When a thread goes from one address space to another via `SwapContext`, the `CR3` is set. When the `CPU` wants to translate a physical address, it first checks if the translation already exists in the `Translation Lookaside Buffer` or `TLB`. If no translation exists, it walks the page tables.

As a sidenote, you can flush the `TLB` by toggling the `CR4.PGE` bit or firing the `INVLPG` instruction.

A word on naming conventions. Four-level paging is implemented in both `IA32e` and `AMD64`, but with different naming schemes. This often leads to confusion. In this pape we simplify to `PML4`, `PML3`, `PML2` and `PML1`. Appending `e` refers to one of the `512` entries in a page table.

Ignoring large pages, we could translate a virtual address with something like this.

{% highlight C++ %}
#define __pfn_to_page(pfn) (pfn << __page_shift)

u8* vtop(EPROCESS* proc, virt_addr_t va)
{
  // read from proc, but if it is currentproc we can obv __readcr3
  // procs can also obscure the DirectoryTableBase with tricks
  pml4e_t* pml4 = read<PAGE_SIZE>(__pfn_to_page(proc->DirectoryTableBase.pfn));
  pml3e_t* pml3 = read<PAGE_SIZE>(__pfn_to_page(pml4[va.pml4_idx].pfn));
  pml2e_t* pml2 = read<PAGE_SIZE>(__pfn_to_page(pml3[va.pml3_idx].pfn));
  pml1e_t* pml1 = read<PAGE_SIZE>(__pfn_to_page(pml2[va.pml2_idx].pfn));

  // we also assume all pages are paged-in (present=1)...
  return (u8*)(__pfn_to_page(pml1[va.pml1_idx].pfn) + va.offset);
}
{% endhighlight %}

However, both `PML3` and `PML2` have large page entries, describing `1GB` and `2MB` pages respectively. This is all outlined in my [header file.](https://gist.github.com/hLunaaa/f23a48775bbe5425b4825eefcebf1197) We call these `PML3e_LARGE` and `PML2e_LARGE`. So in page table `PML3`, entries can describe the `PML2` or a `1GB` page directly. Similarly, entries in `PML2` might describe the `PML1` or a `2MB` page directly. We can check for large page by checking the `PageSize == 1` bit. Thus, we can do the above, but simply return as soon as we hit a large page. I leave this as an exercise to the reader.

`PageView64` was created to visualize these structures. The program consists of the `PageView64.sys` driver and `PageView64.exe` client. The driver calls `MmCopyMemory` on `IRP`. We send the process ID and receive the `4KB` page tables. The client uses `ImGui` with `SFML`.

<video width="100%" controls="controls"><source src="/assets/PageView64.mp4"></video>
